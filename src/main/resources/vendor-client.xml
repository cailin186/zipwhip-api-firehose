<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- The message listener container for Broker A1 -->
    <bean id="jmsContainerA1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="destinationName" value="/vendor/aol"/>
        <property name="connectionFactory">
            <!-- Actually does the work of connecting to broker A1 -->
            <bean class="org.springframework.jms.connection.CachingConnectionFactory">
                <constructor-arg index="0">
                    <bean class="org.apache.activemq.ActiveMQConnectionFactory">

                        <!-- This should point to your broker -->
                        <property name="brokerURL" value="tcp://broker-vendor-1.zipwhip.com:61616"/>
                        <property name="userName" value="{your-user-name}"/>
                        <property name="password" value="{your-password}"/>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <property name="messageListener">
            <bean class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
                <property name="delegate" ref="signalTokenProcessorJmsListener"/>
                <property name="defaultListenerMethod" value="onMessage"/>
            </bean>
        </property>
    </bean>

    <!--
      - The message listener container for Broker B1. The ListenerContainer for Spring is a container for a collection of
      - JMS consumers. This guy can grow/shrink the active consumer count depending on load. It also helps manage the
      - transactions so that you can avoid dropped work if you crash. Following the Spring "template" pattern, it's
      - just a convenience wrapper around the complex JMS api.
      -->
    <bean id="jmsContainerB1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="destinationName" value="/vendor/aol"/>
        <property name="connectionFactory">

            <!--
            - Actually does the work of connecting to broker B1
            - Usually your Java Enterprise Application Server would provide this for you via JNDI.
            - We're using the Spring one for simplicity, and so you can run this via java direclty.
            -->
            <bean class="org.springframework.jms.connection.CachingConnectionFactory">
                <constructor-arg index="0">
                    <bean class="org.apache.activemq.ActiveMQConnectionFactory">

                        <!-- This should point to your broker -->
                        <property name="brokerURL" value="tcp://broker-vendor-2.zipwhip.com:61616"/>
                        <property name="userName" value="{your-user-name}"/>
                        <property name="password" value="{your-password}"/>
                    </bean>
                </constructor-arg>
            </bean>
        </property>
        <property name="messageListener">
            <!-- Redirects all incoming traffic to this bean/method (uses reflection) -->
            <bean class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
                <property name="delegate" ref="signalTokenProcessorJmsListener"/>
                <property name="defaultListenerMethod" value="onMessage"/>
            </bean>
        </property>

        <property name="concurrentConsumers" value="3"/>
        <property name="maxConcurrentConsumers" value="10"/>
    </bean>


    <!-- Receives work via JMS. Highly concurrent. Filters out, parses, and forwards. -->
    <bean name="signalTokenProcessorJmsListener" class="com.zipwhip.vendor.SignalTokenProcessorJmsListener">
        <property name="signalTokenProcessor" ref="signalTokenProcessor"/>
    </bean>

    <!--
      - The SignalTokenProcessor's job is to process the SignalTokens that come from Zipwhip's JMS connectivity.
      - In this case, we're just logging them via Log4j. In real world scenario, there should be some database activity
      - that the vendor uses to record these events.
      -
      - This will be receiving work from many concurrent threads. It is a shared bean with highly concurrent access.
      -->
    <bean id="signalTokenProcessor" class="com.zipwhip.vendor.BrokerSignalTokenProcessor" />

    <!-- This bean populates the other bean. Because the BrokerSignalTokenProcessor is not Spring aware. -->
    <bean class="com.zipwhip.vendor.SpringBrokerSignalTokenProcessorAdapter">

        <property name="observers">
            <map>
                <entry key="/signal">
                    <list>
                        <bean class="com.zipwhip.vendor.SignalTokenProcessorObserverAdapter">
                            <property name="signalTokenProcessor">
                                <bean class="com.zipwhip.api.signals.LoggingSignalTokenProcessor"/>
                            </property>
                        </bean>
                        <bean id="loggingSignalTokenProcessor" class="com.zipwhip.api.signals.LoggingSignalTokenProcessor"/>
                    </list>
                </entry>
                <entry key="/signal/message/receive">
                    <list>
                        <bean class="com.zipwhip.vendor.observers.MessageReceivedSignalTokenObserver">
                            <!-- Maybe this bean has some dependencies on database? -->
                        </bean>
                    </list>
                </entry>

            </map>
        </property>

        <property name="brokerSignalTokenProcessor">
            <ref bean="signalTokenProcessor"/>
        </property>
    </bean>

</beans>